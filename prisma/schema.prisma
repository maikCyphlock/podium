// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          Role      @default(USER)
  events        Event[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String     @id @default(cuid())
  title       String
  description String?
  date        DateTime
  location    String?
  image       String?
  isPublished Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories  Category[]
  races       Race[]
  participants Participant[]
  results     Result[]
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  events      Event[]
  races       Race[]
  results     Result[]
}

model Race {
  id          String       @id @default(cuid())
  name        String
  description String?
  distance    Float
  unit        String
  startTime   DateTime
  eventId     String
  event       Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  categories  Category[]
  results     Result[]
}

model Participant {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  email        String
  birthDate    DateTime
  gender       String
  country      String
  city         String?
  phone        String?
  emergencyContact String?
  bloodType    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  eventId      String
  event        Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  results      Result[]
}

model Result {
  id             String     @id @default(cuid())
  time           String
  position       Int
  bibNumber      String
  status         String     @default("FINISHED") // FINISHED, DNF, DNS, DSQ, etc.
  notes          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  eventId        String
  event          Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  raceId         String
  race           Race       @relation(fields: [raceId], references: [id], onDelete: Cascade)
  categoryId     String
  category       Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  participantId  String
  participant    Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ORGANIZER
  ADMIN
}
